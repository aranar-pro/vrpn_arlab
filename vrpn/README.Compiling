VRPN has had a CMake-based build system since version 07.23.  CMake is
similar in purpose but not in implementation to the Autoconf collection
of tools, and permits building on multiple platforms by creating native
project files for MSVC, XCode, Eclipse, Code::Blocks, makefiles, and
more.

Get CMake from your Linux distribution and/or from www.cmake.org

Use the current directory (vrpn_XX_XX/vrpn) as the "source code" directory
in the CMake GUI; the quat directory (vrpn_XX_XX/quat) will be automatically
detected and built as well.  Choose any directory you want (the source
directory followed by /build is suggested) as the "build binaries"
directory: generated build files will be placed there rather than cluttering
up your source tree.

Many options can be fully configured using CMake as of Dec 2009, and more
are sure to come.  Until then, if you need specific compilation needs
that CMake doesn't appear to provide an interface for, look in the
vrpn_Configure.h.cmake_in file.

If you'd rather use the command line, here's the basics:
    mkdir build
    cd build
    ccmake ../
        - Press 'c' to run the initial configuration
        - Change any options, pressing 'c' to re-configure after each change
        - when satisfied, after configuring, press 'g' to create makefiles, etc
    make

and any/all of these if desired:
    make package
        - Create binary install packages of your configured build using CPack
    make package_source
        - Create source code packages using CPack
    make install
        - Install all libraries, executables, and headers (as configured)
          to your system, to the configured path.  Add DESTDIR=whatever/
          to place the installation tree somewhere other than root.

Instructions for the original Makefile-based build follow.

For those not at UNC, you compile by doing the following:

  for Visual C++:
	Git into VRPN
	cd to vrpn/submodules/
	git hidapi with git clone git://github.com/signal11/hidapi.git
	Download the latest dll from intersense: 
		http://www.intersense.com/downloads/InterSense_SDK_4.17.01.zip
		copy isense to same directory as vrpn folder or else vrpn_tracker_isense.c can't find isense.h
	If coverting from older version: Open and yes convert (and backup copy)
	go into vrpn_configure.h and uncomment #define include_intersense

	build in this order (right click on projects in right explorer)
		quatlib
		gpsnmealib
		make_vrpn_libs_build
		vrpn
		vrpndll

	For Visual Studio 2008 project: Right click properties> Common Properties>Frameworks and references and add GPSNMEALIB folder.

	Now you can build VRPN_server

	Open the vrpn.dsw file. (square with a 9 on it)
	Compile the quat project.
	Compile the VRPN project.
	Then compile whichever of vrpn_server, printvals, etc you want.

   for Unix/Cygwin:
	Go to ../quat.
		Edit 'makefile' to uncomment the architecture you are on.
		gmake
	Come back here (cd ../vrpn)
		Edit Makefile to uncomment your architecture
		gmake
	Go to client_src
		Edit Makefile to uncomment your architecture
		gmake
	Go to server_src
		Edit Makefile to uncomment your architecture
		gmake

	edit the vrpn.cfg file to set it to start tracker you want
		See the file vrpn.cfg.SAMPLE for examples.
		Example:  vrpn_Tracker_NULL Tracker0@MYHOSTNAME 2 2
	(Run the server: sgi_irix/vrpn_server -millisleep 1 -f vrpn.cfg)

	Go to client_src
		Run printvals to check the server
		Example: sgi_irix/printvals localhost

   for Mac OSX ( with optional Intersense build):
		Download the latest dylib from intersense: 
		http://www.intersense.com/downloads/InterSense_SDK_4.17.01.zip
		mkdir /vrpn_07_20/isense
		cp -r /SDK/MacOSX/Sample/* /isense/
		sudo cp /SDK/MacOSX/UniversalLib/libisense.dylib /usr/lib/
		Place the file isports.ini where you want it.  Change the path variable to find it:
		$ export ISPORTS_INI_DIR=/path/to/isports/

		You will need to modify the isports.ini according to the intersense manual.
	
	Then build vrpn:

	Edit vrpn_configure.h to uncomment #define VRPN_INCLUDE_INTERSENSE
	//note: this change doesn't seem to register when building server_src
	Go to quat.
		Edit 'makefile' to uncomment the architecture you are on.
		make
	Come back here (cd ../vrpn)
		In vrpn_Tracker_isense.c and vrpn_Tracker_isense.h, change the path to isense.h to "../isense/isense.h" and isense.c to "../isense/isense.c"
		manually add #define VRPN_INCLUDE_INTERSENSE above #ifdef VRPN_INCLUDE_INTERSENSE otherwise server_src will fail to build.
		Edit Makefile to uncomment your architecture
		make
	Go to client_src
		Edit Makefile to uncomment your architecture
		make
	Go to server_src
		Edit Makefile to uncomment your architecture
		make

	edit the vrpn.cfg file to set it to start tracker you want
		See the file vrpn.cfg for examples.
		Example:  vrpn_Tracker_InterSense Tracker0 AUTO IS900time
	(Run the server: ./macosx*/vrpn_server -millisleep 1 -f ../vrpn.cfg)

	Go to client_src
		Run printvals to check the server
		Example: ./macosx*/printvals localhost
